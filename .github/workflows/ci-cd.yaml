name: CI (test) + Build & Push to GHCR + Local Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read
  packages: write   # needed to push to GHCR

jobs:
  build-test-publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (pip)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Train model (bakes model.joblib)
        run: python train.py

      - name: Run unit tests
        run: pytest -q

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & push Docker image (sha + latest)
        env:
          IMAGE: ghcr.io/${{ github.repository }}
        run: |
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest

  deploy-local:
    # Runs on YOUR Windows self-hosted runner
    runs-on: self-hosted
    needs: build-test-publish

    steps:
      - uses: actions/checkout@v4

      - name: Print env & PATH
        shell: powershell
        run: |
          Write-Host "Runner OS: $env:RUNNER_OS"
          Write-Host "UserProfile: $env:USERPROFILE"
          Write-Host "HOME: $env:HOME"
          Write-Host "KUBECONFIG: $env:KUBECONFIG"
          ($env:Path -split ';') | ForEach-Object { Write-Host $_ }

      - name: Tool versions
        shell: powershell
        run: |
          where.exe kubectl
          where.exe docker
          kubectl version --client
          docker --version

      - name: Show kube contexts & use docker-desktop
        shell: powershell
        run: |
          kubectl config get-contexts
          kubectl config use-context docker-desktop
          kubectl cluster-info

      - name: Check cluster connectivity
        shell: powershell
        run: |
          kubectl get nodes -o wide
          kubectl get ns
          kubectl get svc -A

      - name: Verify manifest exists in workspace
        shell: powershell
        run: |
          pwd
          ls
          ls k8s
          Get-Content k8s/deployment.yaml | Select-Object -First 20

      - name: Apply manifest (ensures resources exist)
        shell: powershell
        run: |
          kubectl apply -f k8s/deployment.yaml --v=6

      - name: Roll out exact image built for this commit
        shell: powershell
        env:
          IMAGE: ghcr.io/${{ github.repository }}:${{ github.sha }}
        run: |
          Write-Host "Rolling out $env:IMAGE"
          kubectl set image deployment/iris-api api=$env:IMAGE --record
          kubectl rollout status deployment/iris-api --timeout=300s

      - name: Show running image (debug)
        shell: powershell
        run: |
          kubectl get deployment iris-api -o jsonpath="{.spec.template.spec.containers[0].image}"
          echo ""
          kubectl get pods -l app=iris-api -o wide
